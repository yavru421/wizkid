# WizKid GUI - PowerShell with WPF GUI
# This script creates a proper GUI window with chat-first design and sidebar menu

Add-Type -AssemblyName PresentationFramework, PresentationCore, WindowsBase

# Create the XAML for our window
$xaml = @"
<Window 
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    Title="WizKid by John D Dondlinger" Height="700" Width="1000">
    <Window.Resources>
        <Style x:Key="SidebarButtonStyle" TargetType="Button">
            <Setter Property="Width" Value="180" />
            <Setter Property="Height" Value="40" />
            <Setter Property="Margin" Value="0,5,0,5" />
            <Setter Property="Background" Value="#673AB7" />
            <Setter Property="Foreground" Value="White" />
            <Setter Property="FontSize" Value="14" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border Background="{TemplateBinding Background}"
                                BorderThickness="0"
                                CornerRadius="5">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="#512DA8"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Window.Resources>
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="200"/>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>
        
        <!-- Left Sidebar with Features -->
        <Grid Grid.Column="0" Background="#F3E5F5">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>
            
            <!-- Logo Area -->
            <Border Grid.Row="0" Height="80" Background="#673AB7">
                <TextBlock Text="WizKid" FontWeight="Bold" FontSize="24" Foreground="White"
                           HorizontalAlignment="Center" VerticalAlignment="Center"/>
            </Border>
            
            <!-- Feature Buttons -->
            <StackPanel Grid.Row="1" Margin="10,20,10,10">
                <TextBlock Text="Features" FontWeight="Bold" Margin="0,0,0,10"/>
                <Button Name="TakeScreenshotBtn" Content="📷 Take Screenshot" Style="{StaticResource SidebarButtonStyle}"/>
                <Button Name="AnalyzeClipboardBtn" Content="📋 Analyze Clipboard" Style="{StaticResource SidebarButtonStyle}"/>
                <Button Name="ReviewCodeBtn" Content="🧑‍💻 Review Code" Style="{StaticResource SidebarButtonStyle}"/>
                <Button Name="SummarizeTextBtn" Content="📝 Summarize Text" Style="{StaticResource SidebarButtonStyle}"/>
                <Button Name="ExplainErrorBtn" Content="❓ Explain Error" Style="{StaticResource SidebarButtonStyle}"/>
                <Button Name="OrganizeFilesBtn" Content="🗂️ Organize Files" Style="{StaticResource SidebarButtonStyle}"/>
                <Button Name="VoiceInputBtn" Content="🎤 Voice Input" Style="{StaticResource SidebarButtonStyle}"/>
                <Button Name="FeedbackBtn" Content="💡 Give Feedback" Style="{StaticResource SidebarButtonStyle}"/>
            </StackPanel>
        </Grid>
        
        <!-- Main Chat Area -->
        <Grid Grid.Column="1">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            
            <!-- Chat Header -->
            <Border Grid.Row="0" Background="#EDE7F6" Height="50" Padding="15,0,15,0">
                <Grid>
                    <TextBlock Text="Chat with WizKid" FontWeight="Bold" FontSize="18" VerticalAlignment="Center"/>
                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Right">
                        <ComboBox Name="ModelComboBox" Width="150" SelectedIndex="0" VerticalAlignment="Center">
                            <ComboBoxItem Content="Scout (Default)"/>
                            <ComboBoxItem Content="Maverick"/>
                            <ComboBoxItem Content="Compound Beta"/>
                        </ComboBox>
                    </StackPanel>
                </Grid>
            </Border>
            
            <!-- Chat Messages Area - Using RichTextBox for embedded images -->
            <ScrollViewer Grid.Row="1" Margin="0,10,0,10" Name="ChatScrollViewer">
                <RichTextBox Name="ChatBox" IsReadOnly="True" Background="White" BorderThickness="0"
                             Padding="15" VerticalAlignment="Stretch" HorizontalAlignment="Stretch">
                    <RichTextBox.Resources>
                        <Style TargetType="{x:Type Paragraph}">
                            <Setter Property="Margin" Value="0,5,0,5"/>
                        </Style>
                    </RichTextBox.Resources>
                    <FlowDocument>
                        <Paragraph>
                            <Run FontWeight="Bold" Foreground="#673AB7">WizKid: </Run>
                            <Run>Hello! I'm WizKid, your friendly assistant. How can I help you today?</Run>
                        </Paragraph>
                    </FlowDocument>
                </RichTextBox>
            </ScrollViewer>
            
            <!-- Input Area -->
            <Grid Grid.Row="2" Margin="10">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <TextBox Name="InputTextBox" Grid.Column="0" Height="60" TextWrapping="Wrap" AcceptsReturn="True"
                         VerticalContentAlignment="Center" Padding="10,5,10,5" FontSize="14"/>
                <Button Name="SendBtn" Grid.Column="1" Content="Send" Width="80" Height="60" 
                        Background="#673AB7" Foreground="White" FontSize="16" FontWeight="Bold"
                        Margin="10,0,0,0" BorderThickness="0"/>
            </Grid>
        </Grid>
    </Grid>
</Window>
"@

# Convert the XAML string to XML object
$reader = [System.Xml.XmlReader]::Create([System.IO.StringReader]::new($xaml))
$window = [Windows.Markup.XamlReader]::Load($reader)

# Get UI elements
$takeScreenshotBtn = $window.FindName('TakeScreenshotBtn')
$analyzeClipboardBtn = $window.FindName('AnalyzeClipboardBtn')
$reviewCodeBtn = $window.FindName('ReviewCodeBtn')
$summarizeTextBtn = $window.FindName('SummarizeTextBtn')
$explainErrorBtn = $window.FindName('ExplainErrorBtn')
$organizeFilesBtn = $window.FindName('OrganizeFilesBtn')
$voiceInputBtn = $window.FindName('VoiceInputBtn')
$feedbackBtn = $window.FindName('FeedbackBtn')
$chatScrollViewer = $window.FindName('ChatScrollViewer')
$chatBox = $window.FindName('ChatBox')
$inputTextBox = $window.FindName('InputTextBox')
$sendBtn = $window.FindName('SendBtn')
$modelComboBox = $window.FindName('ModelComboBox')

# Initialize state variables
$script:currentMode = "Chat"
$script:chatHistory = @(@{ role = 'system'; content = 'You are WizKid by John D Dondlinger, a helpful assistant.' })
$script:lastScreenshot = $null
$script:lastScreenshotPath = $null
$script:isProcessing = $false

# Helper functions for rich text chat display
function Add-UserMessageToChat($message) {
    $paragraph = New-Object System.Windows.Documents.Paragraph
    $userRun = New-Object System.Windows.Documents.Run
    $userRun.Text = "You: "
    $userRun.FontWeight = "Bold"
    $userRun.Foreground = New-Object System.Windows.Media.SolidColorBrush([System.Windows.Media.Colors]::DarkBlue)
    $paragraph.Inlines.Add($userRun)
    
    $messageRun = New-Object System.Windows.Documents.Run
    $messageRun.Text = $message
    $paragraph.Inlines.Add($messageRun)
    
    $chatBox.Document.Blocks.Add($paragraph)
    $chatScrollViewer.ScrollToBottom()
}

function Add-AIMessageToChat($message) {
    $paragraph = New-Object System.Windows.Documents.Paragraph
    $aiRun = New-Object System.Windows.Documents.Run
    $aiRun.Text = "WizKid: "
    $aiRun.FontWeight = "Bold"
    $aiRun.Foreground = New-Object System.Windows.Media.SolidColorBrush([System.Windows.Media.Colors]::Purple)
    $paragraph.Inlines.Add($aiRun)
    
    $messageRun = New-Object System.Windows.Documents.Run
    $messageRun.Text = $message
    $paragraph.Inlines.Add($messageRun)
    
    $chatBox.Document.Blocks.Add($paragraph)
    $chatScrollViewer.ScrollToBottom()
}

function Add-SystemMessageToChat($message, $color = "Gray") {
    $paragraph = New-Object System.Windows.Documents.Paragraph
    $systemRun = New-Object System.Windows.Documents.Run
    $systemRun.Text = $message
    $systemRun.Foreground = New-Object System.Windows.Media.SolidColorBrush([System.Windows.Media.Colors]::$color)
    $systemRun.FontStyle = "Italic"
    $paragraph.Inlines.Add($systemRun)
    $paragraph.TextAlignment = "Center"
    
    $chatBox.Document.Blocks.Add($paragraph)
    $chatScrollViewer.ScrollToBottom()
}

function Add-ImageToChat($imagePath) {
    try {
        $paragraph = New-Object System.Windows.Documents.Paragraph
        $paragraph.TextAlignment = "Center"
        
        $image = New-Object System.Windows.Controls.Image
        $bitmap = New-Object System.Windows.Media.Imaging.BitmapImage
        $bitmap.BeginInit()
        $bitmap.UriSource = New-Object System.Uri($imagePath, [System.UriKind]::Absolute)
        $bitmap.DecodePixelWidth = 500 # Set max width
        $bitmap.EndInit()
        
        $image.Source = $bitmap
        $image.Width = 500
        
        $container = New-Object System.Windows.Documents.InlineUIContainer($image)
        $paragraph.Inlines.Add($container)
        
        $chatBox.Document.Blocks.Add($paragraph)
        $chatScrollViewer.ScrollToBottom()
        
        return $true
    }
    catch {
        Add-SystemMessageToChat("Failed to add image: $($_.Exception.Message)", "Red")
        return $false
    }
}

# Helper function to run PowerShell scripts
function Invoke-PowerShellScript {
    param($ScriptPath, $Arguments = @())
    
    $startInfo = New-Object System.Diagnostics.ProcessStartInfo
    $startInfo.FileName = "powershell.exe"
    $startInfo.Arguments = "-NoProfile -ExecutionPolicy Bypass -File `"$ScriptPath`" $Arguments"
    $startInfo.RedirectStandardOutput = $true
    $startInfo.RedirectStandardError = $true
    $startInfo.UseShellExecute = $false
    $startInfo.CreateNoWindow = $true
    
    $process = New-Object System.Diagnostics.Process
    $process.StartInfo = $startInfo
    $process.Start() | Out-Null
    
    $output = $process.StandardOutput.ReadToEnd()
    $errors = $process.StandardError.ReadToEnd()
    $process.WaitForExit()
    
    return @{
        Output = $output
        Errors = $errors
        ExitCode = $process.ExitCode
    }
}

# Button Events
$takeScreenshotBtn.Add_Click({
    $outputTextBox.Clear()
    $outputTextBox.AppendText("Taking screenshot now! Please wait...\n")
    $script:currentMode = "Screenshot"
    
    try {
        # Use Add-Type to access Windows screenshot functionality
        Add-Type -AssemblyName System.Windows.Forms
        Add-Type -AssemblyName System.Drawing
        
        # Capture the screen
        $bounds = [System.Windows.Forms.Screen]::PrimaryScreen.Bounds
        $bitmap = New-Object System.Drawing.Bitmap $bounds.Width, $bounds.Height
        $graphics = [System.Drawing.Graphics]::FromImage($bitmap)
        $graphics.CopyFromScreen($bounds.Location, [System.Drawing.Point]::Empty, $bounds.Size)
        
        # Save the screenshot
        $screenshotPath = [System.IO.Path]::Combine($PSScriptRoot, "assets", "screenshot.png")
        $directoryPath = [System.IO.Path]::GetDirectoryName($screenshotPath)
        if (-not (Test-Path $directoryPath)) {
            New-Item -ItemType Directory -Path $directoryPath -Force | Out-Null
        }
        
        $bitmap.Save($screenshotPath, [System.Drawing.Imaging.ImageFormat]::Png)
        $graphics.Dispose()
        $bitmap.Dispose()
        
        $outputTextBox.AppendText("Screenshot captured and saved successfully.\n")
        $outputTextBox.AppendText("Enter your question about the screenshot below and click Send.\n\n")
    }
    catch {
        $outputTextBox.AppendText("Error capturing screenshot: $($_.Exception.Message)\n")
        $outputTextBox.AppendText("Please try again or use the clipboard image option instead.\n")
    }
})

$analyzeClipboardBtn.Add_Click({
    $outputTextBox.AppendText("Analyzing clipboard image...\n")
    $script:currentMode = "Clipboard"
    
    $result = Invoke-PowerShellScript "$PSScriptRoot\ScreenHelp.ps1" @("-Action", "ClipboardImage")
    $outputTextBox.AppendText("Clipboard image analysis complete!\n")
    $outputTextBox.AppendText($result.Output)
    if ($result.Errors) {
        $outputTextBox.AppendText("ERRORS:\n$($result.Errors)\n")
    }
    
    $outputTextBox.AppendText("\n\nEnter your question about the image below and click Send.\n")
})

$chatWithGroqBtn.Add_Click({
    $outputTextBox.Clear()
    $outputTextBox.AppendText("Starting chat with Groq...\n")
    $outputTextBox.AppendText("Type your message below and click Send to chat with Groq.\n\n")
    $script:currentMode = "Chat"
    $script:chatHistory = @()
})

$feedbackBtn.Add_Click({
    $outputTextBox.Clear()
    $outputTextBox.AppendText("Thank you for providing feedback!\n")
    $outputTextBox.AppendText("Type your feedback below and click Send to submit it.\n\n")
    $script:currentMode = "Feedback"
})

$sendBtn.Add_Click({
    $userInput = $inputTextBox.Text.Trim()
    if (-not $userInput) { return }
      switch ($script:currentMode) {
        "Screenshot" {
            $outputTextBox.AppendText("You: $userInput\n")
            $outputTextBox.AppendText("Processing your question about the screenshot...\n")
            
            $screenshotPath = [System.IO.Path]::Combine($PSScriptRoot, "assets", "screenshot.png")
            if (Test-Path $screenshotPath) {
                try {
                    # Call Groq API directly via GroqApiUtils methods
                    # Get the API key from .env file
                    $envFile = Join-Path $PSScriptRoot ".env"
                    $apiKey = ""
                    if (Test-Path $envFile) {
                        Get-Content $envFile | ForEach-Object {
                            if ($_ -match "^GROQ_API_KEY=(.*)$") {
                                $apiKey = $matches[1]
                            }
                        }
                    }
                    
                    # Prepare API call
                    $headers = @{
                        "Authorization" = "Bearer $apiKey"
                        "Content-Type" = "application/json"
                    }
                    
                    # Get image as base64
                    $bytes = [System.IO.File]::ReadAllBytes($screenshotPath)
                    $base64 = [System.Convert]::ToBase64String($bytes)                    # Create payload using Scout model
                    $model = "meta-llama/llama-4-scout-17b-16e-instruct" # The Scout model from ScreenHelp.ps1
                    $payload = @{
                        model = $model
                        messages = @(
                            @{
                                role = "user"
                                content = @(
                                    @{
                                        type = "text"
                                        text = $userInput
                                    }
                                    @{
                                        type = "image_url"
                                        image_url = @{
                                            url = "data:image/png;base64,$base64"
                                        }
                                    }
                                )
                            }
                        )
                        max_tokens = 2048
                    }
                    
                    $json = $payload | ConvertTo-Json -Depth 10
                    $response = Invoke-RestMethod -Uri "https://api.groq.com/openai/v1/chat/completions" -Method Post -Headers $headers -Body $json
                    $aiResponse = $response.choices[0].message.content
                    
                    $outputTextBox.AppendText("AI: $aiResponse\n\n")
                } catch {
                    $outputTextBox.AppendText("Error processing image: $($_.Exception.Message)\n")
                    if ($_.Exception.Response) {
                        $reader = New-Object System.IO.StreamReader($_.Exception.Response.GetResponseStream())
                        $reader.BaseStream.Position = 0
                        $reader.DiscardBufferedData()
                        $responseBody = $reader.ReadToEnd()
                        $outputTextBox.AppendText("API Error: $responseBody\n")
                    }
                }
            } else {
                $outputTextBox.AppendText("Screenshot not found. Please try taking a screenshot again.\n")
            }
        }
        "Clipboard" {
            $outputTextBox.AppendText("You: $userInput\n")
            $outputTextBox.AppendText("Processing your question about the clipboard image...\n")
            
            # This would call your script with the question about the clipboard image
            $outputTextBox.AppendText("AI Response would appear here...\n")
        }
        "Chat" {
            $outputTextBox.AppendText("You: $userInput\n")
            
            # Save to chat history
            $script:chatHistory += @{ role = "user"; content = $userInput }
            
            # Make API call to Groq (simplified)
            $result = Invoke-PowerShellScript "$PSScriptRoot\ScreenHelp.ps1" @("-Action", "Chat", "-Input", $userInput)
            $response = $result.Output
            
            $outputTextBox.AppendText("Groq: $response\n\n")
            $script:chatHistory += @{ role = "assistant"; content = $response }
        }
        "Feedback" {
            $outputTextBox.AppendText("Feedback received: $userInput\n")
            $outputTextBox.AppendText("Thank you for your feedback! It has been recorded.\n")
            
            # Save feedback to log file
            $logPath = Join-Path $PSScriptRoot "WizKid_Feedback.log"
            Add-Content -Path $logPath -Value ("[" + (Get-Date) + "] " + $userInput)
            
            $script:currentMode = "None"
        }
        default {
            $outputTextBox.AppendText("Please select an option from the buttons above first.\n")
        }
    }
    
    $inputTextBox.Clear()
})

# Show the window
$window.ShowDialog() | Out-Null

